# .github/workflows/release.yml
name: Build & Release Electron App

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run make
        env:
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build output (macOS) # Keep for debugging if needed
        if: runner.os == 'macOS'
        run: ls -R out/make
        shell: bash
        continue-on-error: true

      # Upload OS-specific artifacts
      - name: Upload Windows Artifact (${{ matrix.os }})
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-Windows
          path: out/make/**/*.exe
          if-no-files-found: error

      - name: Upload macOS Artifact (${{ matrix.os }})
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-macOS
          path: out/make/**/*.dmg
          if-no-files-found: error

      - name: Upload Linux Artifact (${{ matrix.os }})
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-Linux
          path: out/make/**/*.deb
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to create releases/upload assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files (for debugging)
        run: find artifacts -type f

      # --- Create the Release ---
      - name: Create GitHub Release
        id: create_release # Give this step an ID to reference its outputs
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          # body: Optional release notes can go here
          draft: false
          prerelease: false

      # --- Upload Windows Asset ---
      - name: Get Windows Asset Path
        id: set_win_asset_path
        run: |
          asset_path=$(find artifacts/build-artifacts-Windows -name '*.exe' -type f | head -n 1)
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Upload Windows Release Asset
        if: steps.set_win_asset_path.outputs.asset_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.set_win_asset_path.outputs.asset_path }}
          # Example: mirrorbast-v1.0.7-windows-x64.exe (adjust if needed)
          asset_name: mirrorbast-${{ github.ref_name }}-windows-x64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      # --- Upload macOS Asset ---
      - name: Get macOS Asset Path
        id: set_mac_asset_path
        run: |
          asset_path=$(find artifacts/build-artifacts-macOS -name '*.dmg' -type f | head -n 1)
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Upload macOS Release Asset
        if: steps.set_mac_asset_path.outputs.asset_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.set_mac_asset_path.outputs.asset_path }}
          # Example: mirrorbast-v1.0.7-macos-arm64.dmg (or -x64 depending on build)
          asset_name: mirrorbast-${{ github.ref_name }}-macos-arm64.dmg
          asset_content_type: application/x-apple-diskimage

      # --- Upload Linux Asset ---
      - name: Get Linux Asset Path
        id: set_linux_asset_path
        run: |
          asset_path=$(find artifacts/build-artifacts-Linux -name '*.deb' -type f | head -n 1)
          echo "asset_path=${asset_path}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Upload Linux Release Asset
        if: steps.set_linux_asset_path.outputs.asset_path != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.set_linux_asset_path.outputs.asset_path }}
          # Example: mirrorbast-v1.0.7-linux-amd64.deb
          asset_name: mirrorbast-${{ github.ref_name }}-linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package
