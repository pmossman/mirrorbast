# .github/workflows/release.yml
name: Build & Release Electron App

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags like v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run dist # Use electron-builder command
        env:
          # WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build output # For debugging
        run: ls -R dist # Check the new output directory
        shell: bash
        continue-on-error: true

      # Upload OS-specific artifacts
      - name: Upload Windows Artifact (${{ matrix.os }})
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-Windows
          # Upload the entire dist folder for Windows to ensure installer and blockmap are available if needed later
          # We will select the specific installer file in the release job
          path: dist/
          if-no-files-found: error

      - name: Upload macOS Artifact (${{ matrix.os }})
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-macOS
          path: dist/**/*.zip # Look in 'dist' for ZIP
          if-no-files-found: error

      - name: Upload Linux Artifact (${{ matrix.os }})
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-Linux
          path: dist/**/*.deb # Look in 'dist' for DEB
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required to create releases/upload assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into an 'artifacts' directory

      - name: List downloaded files (for debugging)
        run: find artifacts -type f

      # Using simpler release action
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          # --- Refined glob patterns ---
          # Target only the desired final distributable files
          files: |
            artifacts/build-artifacts-Windows/**/*Setup*.exe # Only upload the NSIS Setup executable
            artifacts/build-artifacts-macOS/**/*.zip
            artifacts/build-artifacts-Linux/**/*.deb
          # --- End Refined Patterns ---
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
